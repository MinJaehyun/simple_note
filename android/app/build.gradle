plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"

    // Make sure that you have the Google services Gradle plugin
    id 'com.google.gms.google-services'
    // Add the App Distribution Gradle plugin
    id 'com.google.firebase.appdistribution'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// note: 배포 설정 - 1: 디버깅 시, 있어도 상관없다
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "ai.mjhfactory.simple_note"
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "ai.mjhfactory.simple_note"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    // note: 배포 설정 - 2: 디버깅 시, 있어도 상관없다
    signingConfigs {
        release {
            // 변경 후:
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    // note: 배포 설정 - 2: 디버깅 시, 있어도 상관없다
    buildTypes {
        release {
            // 디버그 사용 시:
//            signingConfig signingConfigs.debug
            // 배포 시:
            signingConfig signingConfigs.release
        }
    }

    flutter {
        source '../..'
    }

    buildscript {
        repositories {
            google()  // 플러그인 다운로드를 위한 레포지토리 추가
            jcenter()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:4.1.0'
            classpath 'com.google.gms:google-services:4.3.3'
            classpath 'com.google.firebase:firebase-appdistribution-gradle:2.1.0' // 플러그인 버전 추가
        }
    }

    allprojects {
        repositories {
            google()
            jcenter()
        }
    }

    dependencies {
        // Import the Firebase BoM
        implementation platform('com.google.firebase:firebase-bom:33.1.2')
        // TODO: Add the dependencies for Firebase products you want to use
        // When using the BoM, don't specify versions in Firebase dependencies
        implementation 'com.google.firebase:firebase-analytics'
    }
}
//
//dependencies {
//    // Import the Firebase BoM
//    implementation platform('com.google.firebase:firebase-bom:33.1.2')
//    // TODO: Add the dependencies for Firebase products you want to use
//    // When using the BoM, don't specify versions in Firebase dependencies
//    implementation 'com.google.firebase:firebase-analytics'
//
//    classpath 'com.android.tools.build:gradle:4.1.0'
//    classpath 'com.google.gms:google-services:4.3.3' // 이 부분을 추가합니다.
//    classpath 'com.google.firebase:firebase-appdistribution-gradle:2.1.0' // 이 부분을 추가합니다.
//}
